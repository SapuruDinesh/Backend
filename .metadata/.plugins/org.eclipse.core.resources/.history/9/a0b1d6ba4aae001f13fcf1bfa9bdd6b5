package com.backend;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class OfficeRostering {
	public static int officeRostering(int n, int m, int[][] friendships, int k) {
        // Initialize the employees' status: all WFO on day 1
        boolean[] status = new boolean[n];
        Arrays.fill(status, true);  // All employees are WFO on Day 1

        // Create a graph to represent friendships
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] friendship : friendships) {
            graph.get(friendship[0]).add(friendship[1]);
            graph.get(friendship[1]).add(friendship[0]);
        }

        int totalRosteringValue = 0;
        int days = 0;

        while (totalRosteringValue < k) {
            // Calculate current day's rostering value (number of WFO employees)
            int currentRosteringValue = 0;
            for (boolean s : status) {
                if (s) currentRosteringValue++;
            }
            totalRosteringValue += currentRosteringValue;
            days++;

            if (totalRosteringValue >= k) break;

            // Prepare next day's status based on current friendships and WFO/WFH rules
            boolean[] newStatus = new boolean[n];
            for (int i = 0; i < n; i++) {
                int friendCount = 0;
                for (int friend : graph.get(i)) {
                    if (status[friend]) friendCount++;
                }

                if (status[i]) {  // Employee is WFO today
                    newStatus[i] = (friendCount == 3);  // Stay WFO if exactly 3 friends are WFO
                } else {  // Employee is WFH today
                    newStatus[i] = (friendCount < 3);  // Switch to WFO if fewer than 3 friends are WFO
                }
            }
            status = newStatus;
        }

        return days;
    }

  
	public static void main(String[] args) {
		int n1 = 4;
        int m1 = 5;
        int[][] friendships1 = { {1, 3}, {3, 2}, {0, 3}, {0, 1}, {2, 1} };
        int k1 = 8;
        System.out.println("Test Case 1 Output: " + officeRostering(n1, m1, friendships1, k1));  // Expected output: 3
        
        // Test case 2
        int n2 = 5;
        int m2 = 7;
        int[][] friendships2 = { {1, 4}, {0, 4}, {0, 1}, {3, 2}, {3, 4}, {2, 0}, {1, 3} };
        int k2 = 15;
        System.out.println("Test Case 2 Output: " + officeRostering(n2, m2, friendships2, k2));  // Expected output: 5
    
	}

}
